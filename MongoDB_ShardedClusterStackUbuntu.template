{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "MongoDB replica set stack",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String" 
        },

        "InstanceType" : {
            "Type" : "String", 
            "Default" : "m1.small", 
            "AllowedValues" : [ "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.xlarge", "cc1.4xlarge" ],
            "Description" : "EC2 instance type (e.g. m1.large, m1.xlarge, m2.xlarge)"
        },

        "VolumeSize" : {
            "Description" : "Volume size for each EBS volume",
            "Type" : "Number",
            "Default" : "10"
        },

        "ReplicaSetName" : {
            "Description" : "Name for the MongoDB replica set",
            "Type" : "String",
            "Default" : "MyReplicaSet"
        }
    },

    "Mappings" : {
        "InstanceTypeArch" : {
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"      : { "64" : "ami-9c78c0f5", "64HVM" : "ami-9078c0f9" },
            "us-west-2"      : { "64" : "ami-7eab224e", "64HVM" : "ami-60ab2250" },
            "us-west-1"      : { "64" : "ami-bb4f69fe", "64HVM" : "NOT_YET_SUPPORTED" },
            "eu-west-1"      : { "64" : "ami-3b65664f", "64HVM" : "ami-25656651" },
            "ap-southeast-1" : { "64" : "ami-fefcbcac", "64HVM" : "NOT_YET_SUPPORTED" },
            "ap-northeast-1" : { "64" : "ami-eca719ed", "64HVM" : "NOT_YET_SUPPORTED" },
            "sa-east-1"      : { "64" : "ami-b45b82a9", "64HVM" : "NOT_YET_SUPPORTED" }
        },

        "RegionZone" : {
            "us-east-1"     : {"AZ1" : "us-east-1a", "AZ2" : "us-east-1b", "AZ3" : "us-east-1b", "AZ4" : "us-east-1d", "AZ5" : "us-east-1e"},
            "us-west-1"     : {"AZ1" : "us-west-1a", "AZ2" : "us-west-1b", "AZ3" : "us-west-1c"},
            "us-west-2"     : {"AZ1" : "us-west-2a", "AZ2" : "us-west-2b"},
            "eu-west-1"     : {"AZ1" : "eu-west-1a", "AZ2" : "eu-west-1b", "AZ3" : "eu-west-1c"},
            "ap-northeast-1": {"AZ1" : "ap-northeast-1a", "AZ2" : "ap-northeast-1b"},
            "ap-southeast-1": {"AZ1" : "ap-southeast-1a", "AZ2" : "ap-southeast-1b"},
            "sa-east-1"     : {"AZ1" : "sa-east-1a", "AZ2" : "sa-east-1b"}
        }
    },

    "Resources" : {
        "MongoSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "ReplicaSet security group",
                "SecurityGroupIngress" : [ 
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "22",
                        "ToPort" : "22",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },

        "MongoSecurityGroupIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupName" : { "Ref" : "MongoSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "27017",
                "ToPort" : "27017",
                "SourceSecurityGroupName" : { "Ref" : "MongoSecurityGroup" }
            }
        },

        "StatusIngress" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
                "GroupName" : { "Ref" : "MongoSecurityGroup" },
                "IpProtocol" : "tcp",
                "FromPort" : "28017",
                "ToPort" : "28017",
                "SourceSecurityGroupName" : { "Ref" : "MongoSecurityGroup" }
            }
        },

        "CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement": [ {
                        "Effect":"Allow",
                        "Action":"cloudformation:DescribeStackResource",
                        "Resource":"*"
                    } ] }
                } ]
            }
        },

        "AccessKey" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "CfnUser" }
            }
        },

        "MongoConfig1" : {
            "Type" : "AWS::CloudFormation::Stack",
            "Properties" : {
                "TemplateURL" : "https://s3.amazonaws.com/cf-template-mongodb-ubuntu/MongoDB_ShardedClusterConfigUbuntu.template",
                "Parameters" : {
                    "KeyName" : { "Ref" : "KeyName" },
                    "InstanceType" : { "Ref" : "InstanceType" },
                    "VolumeSize" : { "Ref" : "VolumeSize" },
                    "AccessKeyId" : { "Ref" : "AccessKey" },
                    "SecretAccessKey" : {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "ReplicaSetName" : { "Ref" : "ReplicaSetName" },
                    "SecurityGroupName" : { "Ref" : "MongoSecurityGroup" },
                    "InstanceZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ2"] }
                }
            }
        },

        "MongoConfig2" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "MongoConfig1",
            "Properties" : {
                "TemplateURL" : "https://s3.amazonaws.com/cf-template-mongodb-ubuntu/MongoDB_ShardedClusterConfigUbuntu.template",
                "Parameters" : {
                    "KeyName" : { "Ref" : "KeyName" },
                    "InstanceType" : { "Ref" : "InstanceType" },
                    "VolumeSize" : { "Ref" : "VolumeSize" },
                    "AccessKeyId" : { "Ref" : "AccessKey" },
                    "SecretAccessKey" : {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "ReplicaSetName" : { "Ref" : "ReplicaSetName" },
                    "SecurityGroupName" : { "Ref" : "MongoSecurityGroup" },
                    "InstanceZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ3"] }
                }
            }
        },
		
		"MongoConfig3" : {
            "Type" : "AWS::CloudFormation::Stack",
            "DependsOn" : "MongoConfig2",
            "Properties" : {
                "TemplateURL" : "https://s3.amazonaws.com/cf-template-mongodb-ubuntu/MongoDB_ShardedClusterConfigUbuntu.template",
                "Parameters" : {
                    "KeyName" : { "Ref" : "KeyName" },
                    "InstanceType" : { "Ref" : "InstanceType" },
                    "VolumeSize" : { "Ref" : "VolumeSize" },
                    "AccessKeyId" : { "Ref" : "AccessKey" },
                    "SecretAccessKey" : {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "ReplicaSetName" : { "Ref" : "ReplicaSetName" },
                    "SecurityGroupName" : { "Ref" : "MongoSecurityGroup" },
                    "InstanceZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ3"] }
                }
            }
        },

        "MongoShardRouter" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                        },
                        "files" : {
                        }
                    }
                }
            },
            "DependsOn" : [ "MongoConfig3", "MongoConfig2", "MongoConfig1" ],
            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" }, 
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "SecurityGroups" : [ { "Ref" : "MongoSecurityGroup" } ],
                "KeyName" : { "Ref" : "KeyName" },
				"Tags" : [
          			{"Key" : "Name", "Value" : "MongoDBRouter" },
          			{"Key" : "Owner", "Value" : "inetgiant" }
        		],
                "AvailabilityZone" : { "Fn::FindInMap" : ["RegionZone", { "Ref" : "AWS::Region"}, "AZ1"] },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",

                    "## Error reporting helper function\n",
                    "function error_exit\n",
                    "{\n",
                    "   cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleP1" }, "'\n",
                    "   exit 1\n",
                    "}\n",
                    
                    "## add mongo gpg key\n",
                    "apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10 >> /tmp/cfn-init.log 2>&1\n",
                    "echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' >> /etc/apt/sources.list\n",
                    
                    "apt-get -y update >> /tmp/cfn-init.log 2>&1\n",
                    
                    "DEBIAN_FRONTEND=noninteractive apt-get -y install mdadm sysstat lvm2 mongodb-10gen >> /tmp/apt.log 2>&1\n",
                    "service mongodb stop\n",
                    
                    "apt-get -y install python-setuptools\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

                    "## Initialize CloudFormation bits\n",
                    "cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoShardRouter",
                    "   --access-key ",  { "Ref" : "AccessKey" },
                    "   --secret-key ", {"Fn::GetAtt": ["AccessKey", "SecretAccessKey"]},
                    "   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

                    "## Waiting for EBS mounts to become available\n",
                    "while [ ! -e /dev/xvdh1 ]; do echo waiting for /dev/xvdh1 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh2 ]; do echo waiting for /dev/xvdh2 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh3 ]; do echo waiting for /dev/xvdh3 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh4 ]; do echo waiting for /dev/xvdh4 to attach; sleep 10; done\n",

                    "## Create RAID10 and persist configuration\n",
                    "mdadm --verbose --create /dev/md0 --level=10 --chunk=256 --raid-devices=4 /dev/xvdh1 /dev/xvdh2 /dev/xvdh3 /dev/xvdh4 > /tmp/mdadm.log 2>&1\n",
                    "echo '`mdadm --detail --scan`' | tee -a /etc/mdadm.conf\n",

                    "## Set read-ahead on each device\n",
                    "blockdev --setra 128 /dev/md0\n",
                    "blockdev --setra 128 /dev/xvdh1\n",
                    "blockdev --setra 128 /dev/xvdh2\n",
                    "blockdev --setra 128 /dev/xvdh3\n",
                    "blockdev --setra 128 /dev/xvdh4\n",

                    "## Create physical and logical volumes\n",
                    "dd if=/dev/zero of=/dev/md0 bs=512 count=1\n",
                    "pvcreate /dev/md0\n",
                    "vgcreate vg0 /dev/md0\n",
                    "lvcreate -l 90%vg -n data vg0\n",
                    "lvcreate -l 5%vg -n log vg0\n",
                    "lvcreate -l 5%vg -n journal vg0\n",

                    "## Create filesystems and mount point info\n",
                    "mke2fs -t ext4 -F /dev/vg0/data > /tmp/mke2fs1.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/log > /tmp/mke2fs2.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/journal > /tmp/mke2fs3.log 2>&1\n",

                    "mkdir /data\n",
                    "mkdir /log\n",
                    "mkdir /journal\n",

                    "echo '/dev/vg0/data /data ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/log /log ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/journal /journal ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    
                    "mount /data > /tmp/mount1.log 2>&1\n",
                    "mount /log > /tmp/mount2.log 2>&1\n",
                    "mount /journal > /tmp/mount3.log 2>&1\n",

                    "ln -s /journal /data/journal\n",

                    "chown -R mongodb:mongodb /data > /tmp/chown1.log 2>&1\n",
                    "chown -R mongodb:mongodb /log > /tmp/chown2.log 2>&1\n",
                    "chown -R mongodb:mongodb /journal > /tmp/chown3.log 2>&1\n",

                    "## Update mongod configuration\n",
                    "cat <<EOF > /etc/mongodb.conf\n",
                    "logpath=/log/mongod.log\n",
                    "logappend=true\n",
                    "fork=true\n",
                    "dbpath=/data\n",
                    "rest=true\n",
                    "replSet=", { "Ref" : "ReplicaSetName" } ,"\n",
                    "EOF\n",

                    "## Start mongod to pick up new conf\n",
                    "service mongodb start > /tmp/mongod-start.log 2>&1\n",

                    "## Waiting until mongod has started\n",
                    "sleep 120\n",

                    "## Create replica set configuration\n",
                    "## The following is only needed on the PRIMARY\n",
                    "HOSTNAME=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/public-hostname`\n",

					"## Update mongod configuration\n",
					"mv /etc/init/mongodb.conf /etc/init/mongodb.conf.BAK\n",
                    "cat <<EOF > /etc/init/mongodb.conf\n",
                    "# Ubuntu upstart file at /etc/init/mongodb.conf\n",
					"\n",
					"limit nofile 20000 20000\n",
					"\n",
					"kill timeout 300 # wait 300s between SIGTERM and SIGKILL.\n",
					"\n",
					"auth=true\n",
					"\n",
					"pre-start script\n",
					"    mkdir -p /var/lib/mongodb/\n",
					"    mkdir -p /var/log/mongodb/\n",
					"end script\n",
					"\n",
					"start on runlevel [2345]\n",
					"stop on runlevel [06]\n",
					"\n",
					"script\n",
					"  ENABLE_MONGODB=\"yes\"\n",
					"  if [ -f /etc/default/mongodb ]; then . /etc/default/mongodb; fi\n",
					"  if [ \"x$ENABLE_MONGODB\" = \"xyes\" ]; then exec start-stop-daemon --start --quiet --chuid mongodb --exec  /usr/bin/mongod -- --configdb", {"Fn::GetAtt":["MongoConfig1", "Outputs.MongoConfigName"]}, " ", {"Fn::GetAtt":["MongoConfig2", "Outputs.MongoConfigName"]}, " ", {"Fn::GetAtt":["MongoConfig3", "Outputs.MongoConfigName"]}, "; fi\n",
					"end script\n",
                    "EOF\n",
					
					"## Raise file descriptor limits\n",
					"echo '* hard nofile 100000' | tee -a /etc/security/limits.conf\n",
					"echo '* soft nofile 100000' | tee -a /etc/security/limits.conf\n",
					"ulimit -n 100000\n",
					
					"## Start mongod\n",
                    "service mongodb start > /tmp/mongod-start.log 2>&1\n",

                    "## CloudFormation signal that setup is complete\n",
                    "cfn-signal -e 0 -r \"MongoShardRouter setup complete\" '", { "Ref" : "WaitHandleP1" }, "'\n"
                ] ] } }
            }
        },

        "MongoVolume1P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardRouter", "AvailabilityZone" ]}
            }
        },

        "MongoVolume2P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardRouter", "AvailabilityZone" ]}
            }
        },

        "MongoVolume3P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardRouter", "AvailabilityZone" ]}
            }
        },

        "MongoVolume4P1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardRouter", "AvailabilityZone" ]}
            }
        },

        "MongoVolumeMount1P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardRouter" },
                "VolumeId" : { "Ref" : "MongoVolume1P1" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoVolumeMount2P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardRouter" },
                "VolumeId" : { "Ref" : "MongoVolume2P1" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoVolumeMount3P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardRouter" },
                "VolumeId" : { "Ref" : "MongoVolume3P1" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoVolumeMount4P1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardRouter" },
                "VolumeId" : { "Ref" : "MongoVolume4P1" },
                "Device" : "/dev/sdh4"
            }
        },

        "WaitHandleP1" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionP1" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : [ "MongoVolumeMount1P1", "MongoVolumeMount2P1", "MongoVolumeMount3P1", "MongoVolumeMount4P1" ],
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleP1" },
                "Timeout" : "10000"
            }
        }
    },

    "Outputs" : {
        "MongoRouterPublicDnsName" : {
            "Value" : { "Fn::GetAtt" : [ "MongoShardRouter", "PublicDnsName" ] },
            "Description" : "public DNS name of the MongoDB Router Server"
        },

        "MongoConfig1PublicDnsName" : { 
            "Value" : { "Fn::GetAtt" : [ "MongoConfig1", "Outputs.MongoConfigName" ] },
            "Description" : "public DNS name of the MongoDB Config Server"
        },

        "MongoConfig2PublicDnsName" : { 
            "Value" : { "Fn::GetAtt" : [ "MongoConfig2", "Outputs.MongoConfigName" ] },
            "Description" : "public DNS name of the MongoDB Config Server"
        },

		"MongoConfig3PublicDnsName" : { 
            "Value" : { "Fn::GetAtt" : [ "MongoConfig3", "Outputs.MongoConfigName" ] },
            "Description" : "public DNS name of the MongoDB Config Server"
        }
    }
}