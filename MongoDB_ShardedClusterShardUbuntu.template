{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "MongoDB Shard",

    "Parameters" : {
        "KeyName" : {
            "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
            "Type" : "String" 
        },

        "InstanceType" : {
            "Type" : "String", 
            "Default" : "m1.small",
            "AllowedValues" : [ "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.xlarge", "cc1.4xlarge" ],
            "Description" : "EC2 instance type (e.g. m1.large, m1.xlarge, m2.xlarge)"
        },

        "VolumeSize" : {
            "Description" : "Volume size for each EBS volume",
            "Type" : "Number",
            "Default" : "10"
        },

        "SecurityGroupName" : {
            "Description" : "MongoDB replica set security group name",
            "Type" : "String"
        },

		"ReplicaSetName" : {
            "Description" : "Name for the MongoDB replica set",
            "Type" : "String"
        }
    },

    "Mappings" : {
        "InstanceTypeArch" : {
            "m1.small"    : { "Arch" : "64" },
            "m1.medium"   : { "Arch" : "64" },
            "m1.large"    : { "Arch" : "64" },
            "m1.xlarge"   : { "Arch" : "64" },
            "m2.xlarge"   : { "Arch" : "64" },
            "m2.2xlarge"  : { "Arch" : "64" },
            "m2.4xlarge"  : { "Arch" : "64" },
            "c1.medium"   : { "Arch" : "64" },
            "c1.xlarge"   : { "Arch" : "64" },
            "cc1.4xlarge" : { "Arch" : "64HVM" }
        },

        "RegionImageZone" : {
            "us-east-1"      : { "64" : "ami-9c78c0f5", "64HVM" : "ami-9078c0f9" },
            "us-west-2"      : { "64" : "ami-7eab224e", "64HVM" : "ami-60ab2250" },
            "us-west-1"      : { "64" : "ami-bb4f69fe", "64HVM" : "NOT_YET_SUPPORTED" },
            "eu-west-1"      : { "64" : "ami-3b65664f", "64HVM" : "ami-25656651" },
            "ap-southeast-1" : { "64" : "ami-fefcbcac", "64HVM" : "NOT_YET_SUPPORTED" },
            "ap-northeast-1" : { "64" : "ami-eca719ed", "64HVM" : "NOT_YET_SUPPORTED" },
            "sa-east-1"      : { "64" : "ami-b45b82a9", "64HVM" : "NOT_YET_SUPPORTED" }
        }
    },

    "Resources" : {
		
		"CfnUser" : {
            "Type" : "AWS::IAM::User",
            "Properties" : {
                "Path": "/",
                "Policies": [ {
                    "PolicyName": "root",
                    "PolicyDocument": { "Statement": [ {
                        "Effect":"Allow",
                        "Action":"cloudformation:DescribeStackResource",
                        "Resource":"*"
                    } ] }
                } ]
            }
        },

        "HostKeys" : {
            "Type" : "AWS::IAM::AccessKey",
            "Properties" : {
                "UserName" : { "Ref" : "CfnUser" }
            }
        },

        "MongoShardInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "config" : {
                        "packages" : {
                        },
                        "files" : {
                        }
                    }
                }
            },
			

            "Properties" : {
                "InstanceType" : { "Ref" : "InstanceType" },
                "ImageId" : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" }, 
                    { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "SecurityGroups" : [ { "Ref" : "SecurityGroupName" } ],
                "KeyName" : { "Ref" : "KeyName" },
				"Tags" : [
          			{"Key" : "Name", "Value" : "MongoDBShard" },
          			{"Key" : "Owner", "Value" : "inetgiant" }
        		],
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash\n",
                    
                    "## Error reporting helper function\n",
                    "function error_exit\n",
                    "{\n",
                    "   cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandleMongoShard" }, "'\n",
                    "   exit 1\n",
                    "}\n",

                    "## add mongo gpg key\n",
                    "apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10 >> /tmp/cfn-init.log 2>&1\n",
                    "echo echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | tee -a /etc/apt/sources.list.d/10gen.list >> /etc/apt/sources.list\n",
                    "apt-get -y update >> /tmp/cfn-init.log 2>&1\n",
					"apt-get purge mongodb-10gen\n",
                    "DEBIAN_FRONTEND=noninteractive apt-get -y install mdadm sysstat lvm2 mongodb-10gen >> /tmp/apt.log 2>&1\n",
                    "service mongodb stop\n",

                    "apt-get -y install python-setuptools\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                    
                    "## Initialize CloudFormation bits\n",
                    "cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r MongoShardInstance",
                    "   --access-key ",  { "Ref" : "HostKeys" },
                    "   --secret-key ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
                    "   --region ", { "Ref" : "AWS::Region" }, " >> /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

                    "## Waiting for EBS mounts to become available\n",
                    "while [ ! -e /dev/xvdh1 ]; do echo waiting for /dev/xvdh1 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh2 ]; do echo waiting for /dev/xvdh2 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh3 ]; do echo waiting for /dev/xvdh3 to attach; sleep 10; done\n",
                    "while [ ! -e /dev/xvdh4 ]; do echo waiting for /dev/xvdh4 to attach; sleep 10; done\n",
                    
                    "## Create RAID10 and persist configuration\n",
                    "mdadm --verbose --create /dev/md0 --level=10 --chunk=256 --raid-devices=4 /dev/xvdh1 /dev/xvdh2 /dev/xvdh3 /dev/xvdh4 > /tmp/mdadm.log 2>&1\n",
                    "echo '`mdadm --detail --scan`' | tee -a /etc/mdadm.conf\n",

                    "## Set read-ahead on each device\n",
                    "blockdev --setra 128 /dev/md0\n",
                    "blockdev --setra 128 /dev/xvdh1\n",
                    "blockdev --setra 128 /dev/xvdh2\n",
                    "blockdev --setra 128 /dev/xvdh3\n",
                    "blockdev --setra 128 /dev/xvdh4\n",

                    "## Create physical and logical volumes\n",
                    "dd if=/dev/zero of=/dev/md0 bs=512 count=1\n",
                    "pvcreate /dev/md0\n",
                    "vgcreate vg0 /dev/md0\n",
                    "lvcreate -l 85%vg -n data vg0\n",
                    "lvcreate -l 5%vg -n log vg0\n",
                    "lvcreate -l 10%vg -n journal vg0\n",

                    "## Create filesystems and mount point info\n",
                    "mke2fs -t ext4 -F /dev/vg0/data > /tmp/mke2fs1.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/log > /tmp/mke2fs2.log 2>&1\n",
                    "mke2fs -t ext4 -F /dev/vg0/journal > /tmp/mke2fs3.log 2>&1\n",

                    "mkdir /data\n",
                    "mkdir /log\n",
                    "mkdir /journal\n",

                    "echo '/dev/vg0/data /data ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/log /log ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    "echo '/dev/vg0/journal /journal ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n",
                    
                    "mount /data > /tmp/mount1.log 2>&1\n",
                    "mount /log > /tmp/mount2.log 2>&1\n",
                    "mount /journal > /tmp/mount3.log 2>&1\n",

                    "ln -s /journal /data/journal\n",

                    "chown -R mongodb:mongodb /data > /tmp/chown1.log 2>&1\n",
                    "chown -R mongodb:mongodb /log > /tmp/chown2.log 2>&1\n",
                    "chown -R mongodb:mongodb /journal > /tmp/chown3.log 2>&1\n",

                    "## Update mongod configuration\n",
					"mv /etc/init/mongodb.conf /etc/init/mongodb.conf.BAK\n",
                    "cat <<EOF > /etc/init/mongodb.conf\n",
                    "# Ubuntu upstart file at /etc/init/mongodb.conf\n",
					"\n",
					"limit nofile 20000 20000\n",
					"\n",
					"kill timeout 300 # wait 300s between SIGTERM and SIGKILL.\n",
					"\n",
					"auth=true\n",
					"\n",
					"pre-start script\n",
					"    mkdir -p /var/lib/mongodb/\n",
					"    mkdir -p /var/log/mongodb/\n",
					"end script\n",
					"\n",
					"start on runlevel [2345]\n",
					"stop on runlevel [06]\n",
					"\n",
					"script\n",
					"  ENABLE_MONGODB=\"yes\"\n",
					"  if [ -f /etc/default/mongodb ]; then . /etc/default/mongodb; fi\n",
					"  if [ \"x$ENABLE_MONGODB\" = \"xyes\" ]; then exec start-stop-daemon --start --quiet --chuid mongodb --exec  /usr/bin/mongod -- --shardsvr; fi\n",
					"end script\n",
                    "EOF\n",

					"## Raise file descriptor limits\n",
					"echo '* hard nofile 100000' | tee -a /etc/security/limits.conf\n",
					"echo '* soft nofile 100000' | tee -a /etc/security/limits.conf\n",
					"ulimit -n 100000\n",
					
                    "## Start mongod\n",
                    "service mongodb start > /tmp/mongod-start.log 2>&1\n",

                    "## CloudFormation signal that setup is complete\n",
                    "cfn-signal -e 0 -r \"MongoShardInstance setup complete\" '", { "Ref" : "WaitHandleMongoShard" }, "'\n"
                ] ] } }
            }
        },

        "MongoVolume1" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardInstance", "AvailabilityZone" ]}
            }
        },

        "MongoVolume2" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardInstance", "AvailabilityZone" ]}
            }
        },

        "MongoVolume3" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardInstance", "AvailabilityZone" ]}
            }
        },

        "MongoVolume4" : {
            "Type" : "AWS::EC2::Volume",
            "Properties" : {
                "Size" : { "Ref" : "VolumeSize" },
                "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoShardInstance", "AvailabilityZone" ]}
            }
        },

        "MongoVolumeMount1" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardInstance" },
                "VolumeId" : { "Ref" : "MongoVolume1" },
                "Device" : "/dev/sdh1"
            }
        },

        "MongoVolumeMount2" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardInstance" },
                "VolumeId" : { "Ref" : "MongoVolume2" },
                "Device" : "/dev/sdh2"
            }
        },

        "MongoVolumeMount3" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardInstance" },
                "VolumeId" : { "Ref" : "MongoVolume3" },
                "Device" : "/dev/sdh3"
            }
        },

        "MongoVolumeMount4" : {
            "Type" : "AWS::EC2::VolumeAttachment",
            "Properties" : {
                "InstanceId" : { "Ref" : "MongoShardInstance" },
                "VolumeId" : { "Ref" : "MongoVolume4" },
                "Device" : "/dev/sdh4"
            }
        },

        "WaitHandleMongoShard" : {
            "Type" : "AWS::CloudFormation::WaitConditionHandle",
            "Properties" : {}
        },

        "WaitConditionMongoShard" : {
            "Type" : "AWS::CloudFormation::WaitCondition",
            "DependsOn" : ["MongoVolumeMount4", "MongoVolumeMount3", "MongoVolumeMount2", "MongoVolumeMount1"], 
            "Properties" : {
                "Handle" : { "Ref" : "WaitHandleMongoShard" },
                "Timeout" : "3000"
            }
        }
    },

    "Outputs" : {
        "MongoShardName" : {
            "Value" : { "Fn::GetAtt" : [ "MongoShardInstance", "PublicDnsName" ] },
            "Description" : "public DNS name of the MongoDB Shard Instance"
        }
    }
}